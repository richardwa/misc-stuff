parametric
    Amplitude :: slider[0, 20] = 0;
in
let
    displace [ifield, amp, off] shape = make_shape {
        ... shape;
        dist p : shape.dist p - (ifield p + off) * amp;
    };

    //hash = lib.noise.rand1x1;
    hash n = frac(sin(n)*43758.5453);
    noise xyz =
        let p = floor xyz;
            f = frac xyz;
            f2 = f*f*(3-2*f);
            n = p[X] + p[Y]*57 + 113*p[Z];
        in
        lerp[lerp[lerp[hash(n+  0), hash(n+  1), f[X]],
                  lerp[hash(n+ 57), hash(n+ 58), f[X]],
                  f[Y]],
             lerp[lerp[hash(n+113), hash(n+114), f[X]],
                  lerp[hash(n+170), hash(n+171), f[X]],
                  f[Y]],
             f[Z]];

    rot v =
        [ dot[v, [0.0, 0.8, 0.6]],
          dot[v, [-0.80, 0.36, -0.48]],
          dot[v, [-0.60, -0.48, 0.64]] ];

    i_fractal [x,y,z,_] =
        do
            local p = rot[x,y,z];
            local f = 0;
            f := f + 0.5000*noise(p); p := p*2.32;
            f := f + 0.2500*noise(p); p := p*3.03;
            f := f + 0.0625*noise(p);
        in f/0.9375;

    fire i =
        let yellow = [1.7, 1.3, 1.0];
            orange = [1.0, 0.6, 0.0];
            red = [1.0, 0.0, 0.0];
            darkgray = [0.2, 0.2, 0.2];
            gray = [0.4, 0.4, 0.4];
        in
        if (i < .25)
            lerp[gray, darkgray, i*4]
        else if (i < .5)
            lerp[darkgray, red, i*4-1]
        else if (i < .75)
            lerp[red, orange, i*4-2]
        else
            lerp[orange, yellow, i*4-3];

in
sphere 12
  >> displace[i_fractal, Amplitude, -.2]
  >> lipschitz 3
  >> colour [i_fractal, fire]
