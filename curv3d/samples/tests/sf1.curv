let
    reflect(I,N) = I - 2.0 * dot(N, I) * N;
in {
  ... cube;
  render: {
    shader = {sf1(pos,nor,rd,col) =
        let
            ref = reflect( rd, nor );
            lig = normalize(-0.4, 0.6, 0.7);
            amb = clamp( 0.5+0.5*nor[Z], 0, 1 );
            dif = clamp( dot( nor, lig ), 0, 1 );
            bac = clamp( dot( nor, normalize(-lig[X],lig[Y],0)), 0, 1 )
                * clamp(1-pos[Z], 0, 1);
            dom = smoothstep( -0.1, 0.1, ref[Z] );
            fre = clamp(1+dot(nor,rd), 0, 1) ^ 2;
            spe = clamp(dot(ref, lig), 0, 1) ^ 16;
            lin = 1.30*dif*(1.00,0.80,0.55)
                + 2.00*spe*(1.00,0.90,0.70)*dif
                + 0.40*amb*(0.40,0.60,1.00)
                + 0.50*dom*(0.40,0.60,1.00)
                + 0.50*bac*(0.35,0.35,0.35)
                + 0.25*fre*(1.00,1.00,1.00);
            iqcol = col * lin;
        in
            lerp(col, iqcol, 0.5);
    };
  };
}
/*
// Only called if the ray struck a shape, returns pixel colour.
vec3 sf1(vec3 pos, vec3 nor, vec3 rd, vec3 col)
{
    vec3 ref = reflect( rd, nor );
    
    // lighting        
    float occ = 1.0;
    vec3  lig = normalize( vec3(-0.4, 0.6, 0.7) );
    float amb = clamp( 0.5+0.5*nor.z, 0.0, 1.0 );
    float dif = clamp( dot( nor, lig ), 0.0, 1.0 );
    float bac = clamp( dot( nor, normalize(vec3(-lig.x,lig.y,0.0))), 0.0, 1.0 )*clamp( 1.0-pos.z,0.0,1.0);
    float dom = smoothstep( -0.1, 0.1, ref.z );
    float fre = pow( clamp(1.0+dot(nor,rd),0.0,1.0), 2.0 );
    float spe = pow(clamp( dot( ref, lig ), 0.0, 1.0 ),16.0);
    
    vec3 lin = vec3(0.0);
    lin += 1.30*dif*vec3(1.00,0.80,0.55);
    lin += 2.00*spe*vec3(1.00,0.90,0.70)*dif;
    lin += 0.40*amb*vec3(0.40,0.60,1.00)*occ;
    lin += 0.50*dom*vec3(0.40,0.60,1.00)*occ;
    lin += 0.50*bac*vec3(0.35,0.35,0.35)*occ;
    lin += 0.25*fre*vec3(1.00,1.00,1.00)*occ;
    vec3 iqcol = col*lin;

    return mix(col,iqcol, 0.5); // adjust contrast
};
*/
