// Table driven regular polyhedra, based on `ideas/shapes/hg_sdf.glsl`,
// ultimately based on "Generalized Distance Functions", Ergun Akleman:
// http://people.tamu.edu/~ergun/research/implicitmodeling/papers/sm99.pdf

// This program is a test case for using arrays within distance functions.

let
GDFVectors = [
    normalize[1, 0, 0],
    normalize[0, 1, 0],
    normalize[0, 0, 1],

    normalize[1, 1, 1 ],
    normalize[-1, 1, 1],
    normalize[1, -1, 1],
    normalize[1, 1, -1],

    normalize[0, 1, phi+1],
    normalize[0, -1, phi+1],
    normalize[phi+1, 0, 1],
    normalize[-phi-1, 0, 1],
    normalize[1, phi+1, 0],
    normalize[-1, phi+1, 0],

    normalize[0, phi, 1],
    normalize[0, -phi, 1],
    normalize[1, 0, phi],
    normalize[-1, 0, phi],
    normalize[phi, 1, 0],
    normalize[-phi, 1, 0],
];

xGDF(p, r, e, begin, end) =
    let d = 0
    in do
        for (i in begin..end)
            d := d + abs(dot(p, GDFVectors[i]))^e;
	in d^(1/e) - r;

GDF(p, r, begin, end) =
    let d = 0
    in do
        for (i in begin..end)
            d := max(d, abs(dot(p, GDFVectors[i])));
    in d - r;

// not an octahedron, not Lipschitz(1)
xOcta(r, e) =
    make_shape {
        dist p = xGDF(p[[X,Y,Z]], r, e, 3, 6);
        is_3d = true;
    };

// works as expected
Octa r =
    make_shape {
        dist p = GDF(p[[X,Y,Z]], r, 3, 6);
        colour p = sRGB(count GDFVectors/19,0,0);
        circumratio = (1/2*sqrt 2) / (1/6*sqrt 6);
        bbox = circumratio * [[-r,-r,-r], [r,r,r]];
        is_3d = true;
    };

xs = parametric exp :: slider[.5,2] = 1 in xOcta(2,exp) >> lipschitz 5;
s = Octa 2;

in
xs
